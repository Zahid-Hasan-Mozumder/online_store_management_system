// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admins {
  id           Int      @id @default(autoincrement())
  firstName    String?
  lastName     String
  email        String   @unique
  password     String
  registeredAt DateTime @default(now())
  updatedAt    DateTime @updatedAt

  permissions Permissions[]
}

model Permissions {
  id Int @id @default(autoincrement())

  adminId        Int
  permissionType String

  create Boolean
  read   Boolean
  update Boolean
  delete Boolean

  admin Admins @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([adminId, permissionType])
}

model Products {
  id           Int     @id @default(autoincrement())
  title        String
  description  String?
  productType  String?
  price        Float   @default(0.0)
  comparePrice Float   @default(0.0)
  vendor       String?
  status       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images      Images[]
  options     Options[]
  varients    Varients[]
  collections CollectionsProducts[]
  tags        TagsProducts[]
  cartLineItems CartLineItems[]
  orderLineItems OrderLineItems[]
}

model Options {
  id       Int      @id @default(autoincrement())
  name     String?
  position Int?
  values   String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId Int
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Varients {
  id           Int     @id @default(autoincrement())
  title        String?
  option1      String?
  option2      String?
  option3      String?
  price        Float   @default(0.0)
  comparePrice Float   @default(0.0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId Int
  images    Images[]
  cartLineItems CartLineItems[]
  orderLineItems OrderLineItems[]

  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@unique([option1, option2, option3])
}

model Images {
  id        Int     @id @default(autoincrement())
  title     String?
  url       String?
  position  Int?
  height    Int?
  Width     Int?
  productId Int
  varientId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Products @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  varient Varients @relation(fields: [varientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Collections {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products CollectionsProducts[]
}

model Tags {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  products TagsProducts[]
}

model CollectionsProducts {
  id Int @id @default(autoincrement())

  collectionId Int
  productId    Int

  collection Collections @relation(fields: [collectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product    Products    @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model TagsProducts {
  id Int @id @default(autoincrement())

  tagId     Int
  productId Int

  tag     Tags     @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product Products @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ProductCounts {
  id Int @id @default(autoincrement())
  count Int @default(0)
}

model CollectionCounts {
  id Int @id @default(autoincrement())
  count Int @default(0)
}

model TagCounts {
  id Int @id @default(autoincrement())
  count Int @default(0)
}

model Clients {
  id Int @id @default(autoincrement())
  firstName String?
  lastName String?
  email String @unique
  password String?
  status String @default("inactive")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address ClientAddress[]
  carts Carts[]
  orders Orders[]
}

model ClientAddress {
  id Int @id @default(autoincrement())
  clientId Int
  address String?
  city String?
  country String?
  zipCode Int
  contactNo BigInt

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client Clients @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Carts {
  id Int @id @default(autoincrement())
  clientId Int
  note String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lineItems CartLineItems[]
  client Clients @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Orders {
  id Int @id @default(autoincrement())
  clientId Int
  note String?
  totalPrice Float?
  status String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lineItems OrderLineItems[]
  shippingAddress ShippingAddress[]
  billingAddress BillingAddress[]

  client Clients @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model CartLineItems {
  id Int @id @default(autoincrement())
  productId Int 
  varientId Int
  cartId Int
  vendor String
  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Products @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  varient Varients @relation(fields: [varientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cart Carts @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model OrderLineItems {
  id Int @id @default(autoincrement())
  productId Int 
  varientId Int
  orderId Int
  vendor String
  quantity Int
  ppp Float
  tpp Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Products @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  varient Varients @relation(fields: [varientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  order Orders @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ShippingAddress {
  id Int @id @default(autoincrement())
  orderId Int 
  firstName String
  lastName String
  address String
  city String
  country String
  zipCode Int
  contactNo BigInt

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Orders @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model BillingAddress {
  id Int @id @default(autoincrement())
  orderId Int 
  firstName String
  lastName String
  address String
  city String
  country String
  zipCode Int
  contactNo BigInt

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Orders @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}